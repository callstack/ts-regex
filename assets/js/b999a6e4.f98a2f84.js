"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[212],{3088:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var r=n(4848),s=n(8453);const i={id:"types",title:"Types"},c=void 0,o={id:"api/types",title:"Types",description:"RegexSequence",source:"@site/docs/api/types.md",sourceDirName:"api",slug:"/api/types",permalink:"/ts-regex-builder/api/types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"types",title:"Types"},sidebar:"docs",previous:{title:"Overview",permalink:"/ts-regex-builder/api"},next:{title:"Builder",permalink:"/ts-regex-builder/api/builder"}},l={},a=[{value:"<code>RegexSequence</code>",id:"regexsequence",level:3},{value:"<code>RegexElement</code>",id:"regexelement",level:3},{value:"<code>RegexConstruct</code>",id:"regexconstruct",level:3}];function d(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"regexsequence",children:(0,r.jsx)(t.code,{children:"RegexSequence"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"type RegexSequence = RegexElement[] | RegexElement;\n"})}),"\n",(0,r.jsx)(t.p,{children:"The sequence of regex elements forming a regular expression. For developer convenience, it also accepts a single element instead of an array."}),"\n",(0,r.jsx)(t.h3,{id:"regexelement",children:(0,r.jsx)(t.code,{children:"RegexElement"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"type RegexElement = RegexConstruct | RegExp | string;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Regex elements are fundamental building blocks of a regular expression. These can be either further regex constructs, regular strings to be matched literally or ",(0,r.jsx)(t.code,{children:"RegExp"})," literals (",(0,r.jsx)(t.code,{children:"/.../"}),") for including simple regexes as part of a larger structure."]}),"\n",(0,r.jsx)(t.h3,{id:"regexconstruct",children:(0,r.jsx)(t.code,{children:"RegexConstruct"})}),"\n",(0,r.jsx)(t.p,{children:"The common type for all regex constructs like character classes, quantifiers, and anchors. You should not need to use this type directly, it is returned by all regex construct functions."}),"\n",(0,r.jsxs)(t.p,{children:["Note: the shape of the ",(0,r.jsx)(t.code,{children:"RegexConstruct"})," is considered private and may change in a breaking way without a major release. We will focus on maintaining the compatibility of regexes built with"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var r=n(6540);const s={},i=r.createContext(s);function c(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);