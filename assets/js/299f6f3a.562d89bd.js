"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[425],{6870:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var t=r(4848),s=r(8453);const a={id:"captures",title:"Captures"},c=void 0,i={id:"api/captures",title:"Captures",description:"capture()",source:"@site/docs/api/captures.md",sourceDirName:"api",slug:"/api/captures",permalink:"/ts-regex-builder/api/captures",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"captures",title:"Captures"},sidebar:"docs",previous:{title:"Constructs",permalink:"/ts-regex-builder/api/constructs"},next:{title:"Quantifiers",permalink:"/ts-regex-builder/api/quantifiers"}},o={},d=[{value:"<code>capture()</code>",id:"capture",level:3},{value:"Named groups",id:"named-groups",level:4},{value:"<code>ref()</code>",id:"ref",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"capture",children:(0,t.jsx)(n.code,{children:"capture()"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function capture(\n  sequence: RegexSequence,\n  options?: {\n    name?: string;\n  },\n): Capture;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Regex syntax:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(...)"})," for capturing groups (no ",(0,t.jsx)(n.code,{children:"name"})," option)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(?<name>...)"})," for named capturing groups (",(0,t.jsx)(n.code,{children:"name"})," option)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Captures, also known as capturing groups, extract and store parts of the matched string for later use."}),"\n",(0,t.jsxs)(n.p,{children:["Capture results are available using array-like ",(0,t.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#using_match",children:[(0,t.jsx)(n.code,{children:"match()"})," result object"]}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"named-groups",children:"Named groups"}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"name"})," options, the group becomes a ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group",children:"named capturing group"})," allowing to refer to it using name instead of index."]}),"\n",(0,t.jsxs)(n.p,{children:["Named capture results are available using ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match#using_named_capturing_groups",children:(0,t.jsx)(n.code,{children:"groups"})})," property on ",(0,t.jsx)(n.code,{children:"match()"})," result."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["TS Regex Builder does not have a construct for non-capturing groups. Such groups are implicitly added when required. E.g., ",(0,t.jsx)(n.code,{children:'zeroOrMore("abc")'})," is encoded as ",(0,t.jsx)(n.code,{children:"(?:abc)+"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"ref",children:(0,t.jsx)(n.code,{children:"ref()"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function ref(name: string): Reference;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Regex syntax: ",(0,t.jsx)(n.code,{children:"\\k<...>"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Creates a reference, also known as a backreference, which allows matching again the exact text that a capturing group previously matched. The reference must use the same name as some capturing group earlier in the expression to form a valid regex."}),"\n",(0,t.jsxs)(n.p,{children:["Usage with ",(0,t.jsx)(n.code,{children:"capture()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const regex = buildRegExp([\n  // Create a named capture using name from `someKey`.\n  capture(..., { name: 'someKey' }),\n  // ... some other elements ...\n\n  // Match the same text as matched by `capture` with the same name.\n  ref('someKey'),\n  ])\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["TS Regex Builder doesn't support using ordinal backreferences (",(0,t.jsx)(n.code,{children:"\\1"}),", ",(0,t.jsx)(n.code,{children:"\\2"}),", etc) because in complex regex patterns, these references are difficult to accurately use."]})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var t=r(6540);const s={},a=t.createContext(s);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);